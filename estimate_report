#!/usr/bin/env ruby

require "net/http"
require "date"
require "json"

project_id = ARGV[0]
api_key = ENV['PIVOTAL_API_TOKEN']

def get_accepted_stories(project_id, api_key)
  uri = URI("https://www.pivotaltracker.com/services/v5/projects/#{project_id}/stories?with_state=accepted&with_story_type=feature")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  req = Net::HTTP::Get.new(uri.request_uri)
  req['X-TrackerToken'] = api_key

  resp = http.request(req)
  return JSON.parse(resp.body)
end

def get_story_history(project_id, api_key, story_id)
  uri = URI("https://www.pivotaltracker.com/services/v5/projects/#{project_id}/stories/#{story_id}/transitions")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  req = Net::HTTP::Get.new(uri.request_uri)
  req['X-TrackerToken'] = api_key

  resp = http.request(req)
  return JSON.parse(resp.body)
end

def format_elapsed_time(duration)
  days = duration / (60 * 60 * 24).to_f
  if days > 0
    return format("%0.1f days", days)
  end
  hours = duration  / (60 * 60)
  return format("%0.2f hours", hours)
end

def process_stories(project_id, api_key)
  stories = get_accepted_stories(project_id, api_key)
  estimates_stories = {}
  stories.each do |story|
    estimate = story["estimate"]
    id = story["id"]
    name = story["name"]

    transitions = get_story_history(project_id, api_key, id)
    started = transitions.detect{|t| t["state"] == "started"}
    accepted = transitions.select{|t| t["state"] == "accepted"}.last
    estimate_list = estimates_stories.fetch(estimate, [])
    estimate_list << {"name" => name, "started" => started,
                      "accepted" => accepted}
    estimates_stories[estimate] = estimate_list
  end

  estimates_stories
end

def calculate_elapsed_time(story)
  started_at = DateTime.iso8601(story["started"]["occurred_at"]).to_time.to_i
  accepted_at = DateTime.iso8601(story["accepted"]["occurred_at"]).to_time.to_i
  accepted_at - started_at
end

def summary(estimates_stories)
  summaries = []
  estimates_stories.each do |estimate, stories|
    story_times = stories.map do |story|
      calculate_elapsed_time(story)
    end

    total_time = story_times.reduce(:+)
    correct_stories = story_times.inject(0) do |product, elapsed_time|
      estimate_in_seconds = estimate * 24 * 60 * 60
      if elapsed_time > (estimate_in_seconds * 0.5) &&
          elapsed_time < (estimate_in_seconds * 1.5)
        product = product + 1
      end
      product
    end
    percentage_correct = 0
    if correct_stories > 0
      percentage_correct = (correct_stories.to_f / stories.length.to_f) * 100.0
    end

    summary = <<-EOH
    <tr>
      <td>#{estimate}</td>
      <td>#{format_elapsed_time(story_times.min)}</td>
      <td>#{format_elapsed_time(story_times.max)}</td>
      <td>#{format_elapsed_time(total_time / stories.length)}</td>
      <td>#{correct_stories}</td>
      <td>#{format("%0.2f", percentage_correct)}%</td>
    </tr>
    EOH
    summaries << summary
  end
  summaries
end

def create_details(estimates_stories)
  details = []
  estimates_stories.each do |estimate, stories|
    stories.each do |story|
      elapsed_time = calculate_elapsed_time(story)
      estimate_in_seconds = estimate * 24 * 60 * 60
      row_class = "correct"
      if elapsed_time > (estimate_in_seconds * 1.5)
        row_class = "over"
      end
      if elapsed_time < (estimate_in_seconds * 0.5)
        row_class = "under"
      end
      row = <<-EOH
  <tr class="#{row_class}">
    <td>#{story["name"]}</td>
    <td>#{estimate}</td>
    <td>#{format_elapsed_time(elapsed_time)}</td>
  </tr>
EOH
      details << row
    end
  end
  details
end

def create_page(summary, details)
<<-EOH
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Estimate report</title>
    <meta name="description" content="Estimate report">
    <meta name="author" content="Colin Gemmell">
    <!-- css files start -->
    <style>
      body {
        background: #F2F2F2;
        font-family: Arial,Helvetica Neue,Helvetica,sans-serif;
      }
      table, tr, td, thead, tbody {
        border: solid 1px #424242;
        margin: 0;
        padding: 0;
      }
      table {
        border-collapse: collapse;
      }
      thead td {
        font-weight: bold;
        background-color: #074C00;
        color: white;
        border-right: solid 1px #096000;
        border-left: solid 1px #096000;
      }
      td {
        padding: 4px 10px;
      }
      .over td {
        background-color: #7A81FF;
      }
      .under td {
        background-color: #F3FF7A;
      }
      .correct td {
        background-color: #87FF7A;
      }
    </style>
    <!-- css files end -->
  </head>
  <body>
    <h2>Summary</h2>
    <table>
      <thead>
        <tr>
          <td>Estimate</td>
          <td>Minimum</td>
          <td>Max</td>
          <td>Average</td>
          <td>No of correct estimates</td>
          <td>Percentage of correct estimates</td>
        </tr>
      </thead>
      <tbody>
        #{summary.join("\n")}
      </tbody>
    </table>
    <h2>
      Details
    </h2>
    <table>
      <thead>
      <tr>
        <td>Story</td>
        <td>Estimate</td>
        <td>Elapsed Time</td>
      </tr>
      </thead>
      <tbody>
        #{details.join("\n")}
      </tbody>
    </table>
  </body>
</html>
EOH
end

estimates_stories = process_stories(project_id, api_key)
summary = summary(estimates_stories)
details = create_details(estimates_stories)
page = create_page(summary, details)

File.open("./output.html", "w") do |file|
  file.write(page)
end
